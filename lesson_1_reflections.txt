How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Using diff (in Windows: FC) helped to e.g. find new entries compared to the old file. 
It also shows where things (e.g. lines) have been deleted. 
And finding typos is very easy because this is detected as "new" code.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

This would save me the time and disk space I take to save numerous versions of a file. 
I could also more easily try out new things and test and get back in case this doesn't work.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

As the author I know best when something new or enough new code was edited worth to save.
But I think it is important to have both: automatik commits and user commits.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

When I write code with interdependent files, I might change code between two commits in several files.
If in this case the files would be stored at different times, it could become difficult to compare 
the different commits. Treat files independently makes sense when the files are not connected to each other.

How can you use the commands git log and git diff to view the history of files?

'git log' lists all commits made in that repository. 
Search for the commit you are looking for and then press 'q' after found.
'git diff' shows the difference of 2 commits by listing their IDs in chronological order:
git diff 'older ID' 'younger ID'.

How might using version control make you more confident to make changes that
could break something?

By creating commits before I make any (risky) changes that could potentially break something 
I always have a version of my code saved that actually worked.

Now that you have your workspace set up, what do you want to try using Git for?

I would like to use it with a Python repository from the Flying Car Nanodegree Program from Udacity.
    
    
    
    
Git
===

[Zum kopieren in Git bash: 
copy = STRG + Einfg (oder nur markieren mit Maus reicht schon)
paste = SHIFT + Einfg]

Um mit Git bash zu arbeiten, muss man es im Ordner öffnen (Rechte Maustaste, dann "Git bash") in dem ein Reporitory existiert (man erkennt es an einem versteckten ".git" Ordner).

Commits: 
User created checkpoints. A snapshot of every file in the repository (better: files you added into the staging area) at the time the commit was made.

Git log: 
zeigt die verschiedenen Commits in zeitlicher Reihenfolge. 
Oben die jüngsten, also letzten Commits, unten die früheren Commits.
Wenn ich die interessante Stelle sehe, abbrechen mit 'q'.

Git log --graph (--oneline) BRANCH1 BRANCH2 ....
zeigt Branch Struktur besser an (mit --oneline wird es kürzer und übersichtlicher). Danach die BRanches auflisten die angezeigt werden sollen

Git diff:
git diff 'ältere ID (unten)' 'jüngere ID (oben)'
git diff: ohne Argumente zeigt Änderungen der Working area zu Staging area.
git diff --staged: zeigt Änderungen zwischen Staging area und letztem Commit

git show 'ID'
zeigt 'git diff' zwischen commit ID und dem zugehörigen parent commit (auch wenn man nicht mehr weiss welches das war; besonders wichtig wenn man Branches gemerged hat da die commits der branches nach Timestamp sortiert werden)

Head:
The commit you are currently working on (current commit). "Detach HEAD" switches to a previous commit.

Git checkout 'commit ID':
Zurückkehren zu einem früheren Stand ('commit ID') des Codes (Commit)

Git checkout master:
Zurückkehren zum jüngsten Commit des Repositories (wenn der Head noch detached ist weil man ein früheres Commit ge'checkout' hat)

Git checkout -b NEW-BRANCH-NAME
Wenn man an einem "detached HEAD" commit arbeitet, das keinem Branch gehört (man arbeitet oder tested an einem früheren commit, nicht das Neueste) und man die Änderungen wiederauffindbar mit git log machen will, muss man einen Branch definieren. Dieser Befehl erzeugt und wechselt zu einem neuen Branch das das detached Head commit enthält.

Git clone:
Macht also eine Kopie (Download) des ganzen Git Repositories mit History auf dem Rechner

Git init:
Erzeugt ein neues Repository im aktuellen Ordner

Git status:
Zeigt den Status und zeigt was seit dem letzten Commit sich geändert hat

Staging area:
Ist die Sammlung von Dateien deren Änderungen getrackt und bei der Erstellung eines Commits erfasst werden. Alle anderen Dateien in dem Ordner oder sonst wo werden nicht getrackt. Man kann Dateien dort eintragen oder löschen.

Git add:
Fügt Dateien in die Staging area ein.

Git rm --cached <file>...
Löscht Dateien aus der Staging area (unstage).

Git commit
Erzeugt ein Commit.

git commit -m "Commit message"
Erzeugt ein Commit mit Message direkt aus der Kommandozeile.

git reset --hard:
Be very carefull with this command: it discards all changes tracked in staging area (oder so ähnlich, nochmal checken)

Branch:
"Verzweigung": wenn man einen "Ast" erzeugen will um etwas zu testen was die originale "full" Entwicklung nicht beeinflusst. Der default branch ist MASTER, und wird automatisch von Git erzeugt.

Remote Branch:
Branch das nicht ich sondern jemand anders erzeugt hat

Git branch:
Zeigt alle vorhandenen Branches. '*' zeigt an welcher Branch "checked out" ist

Git branch "Variante":
Erzeugt einen Branch mit Name "Variante", aber voriger Branch ist noch "checked out".

Git branch -d "Variante":
Löscht (-d für delete) einen Branch, nicht die Commits die da drin waren (also nur das Label wird entfernt). Wird zum Beispiel nach einem Merge von Branches gemacht. Wenn nicht gemerged wurde, sind die Commits vom gelöschten Branch nicht mehr auffindbar (ausser man hat sich die ID gemerkt)

Git checkout "Variante":
Der Branch "Variante" wird ausgecheckt, und alle neuen Commits werden in dem Branch "Variante" angehängt

Git merge BRANCH1 [BRANCH2 ...]
Vereinigt Branches zur aktuellen (ge-checked-out) BRANCH: BRANCH2 und BRANCH1 werden zur aktuellen BRANCH hinzugefügt (aktuelle BRANCH kann auch BRANCH1 sein). Am besten aufpassen das BRANCH1 auch check-out ist. Dabei wird ein neuer Commit erzeugt.

Git merge --abort
Beendet merge wenn ein Fehler (conflict) aufgetreten ist (siehe 3.24 Git Kurs)

Git remote [-v]
Zeigt ob das aktuelle Reporitory verknüpft ist mit einem remote Repository (zB auf Github). [-v] ist optional und gibt etwas mehr Infos aus.
 
Git remote add NAME_REMOTE EMAIL
Erstellt eine Verbindung zu einem remote Repository (zB auf Github). NAME_REMOTE wird der lokale Name des Remotes, EMAIL ist die SSH Adresse in Github (steht auf der Webseite von Github wenn ein neues Repository erzeugt wird)

Git push NAME_REMOTE BRANCH
Kopiert den Branch mit Namen BRANCH NACH Github Repository mit dem lokalen Namen NAME_REMOTE.

Git pull NAME_REMOTE BRANCH
Kopiert den Branch mit Namen BRANCH VON Github Repository mit dem lokalen Namen NAME_REMOTE zurück auf den lokalen PC. 




_______________________________________________________________________________

BACKUP:

(1)
Merge conflict (Newline characters between Windows and Unix systems)

Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.

Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.

To fix this, Windows users should set the global autocrlf attribute to true: git config --global core.autocrlf true. More information can be found here: https://help.github.com/articles/dealing-with-line-endings/#platform-all


(2)




